fn generate_rays(queue_out: &RayQueue, width: i32, height: i32, shader_ref: ShaderRef, rnd: fn() -> f32) -> () {    
    perspective_camera(queue_out, width, height, rnd)
}

fn perspective_camera(queue_out: &RayQueue, width: i32, height: i32, rnd: fn() -> f32) -> () {
    let aspect: f32 = (width as f32) / (height as f32);

    for x in range(0, width) @{
        for y in range(0, height) @{
            let mut rel_x = (x as f32) / (width as f32);
            let mut rel_y = -(y as f32) / (height as f32);

            rel_x = rel_x * 2.0f - 1.0f;
            rel_y = (rel_y * 2.0f + 1.0f) / aspect;

            let sample_ray = Ray {
                org: vec3(rel_x, rel_y, 0.0f),
                dir: vec3(0.0f, 0.0f, 1.0f),
                tri: -1,
                tmin: 0.0f,
                tmax: flt_max,
                u: 0.0f,
                v: 0.0f
            };
            set_ray(queue_out, y * width + x, sample_ray);
        }
    }
}
