fn invoke_lightshader(shader_ref : ShaderRef, intensity : [f32 * 3], pos : [f32 * 3], dir : [f32 * 3]) -> f32 {
    (1.0f)
}

fn call_shader(queue_in : &RayQueue, queue_out : &RayQueue, shader_ref : ShaderRef, mut framebuffer : &[f32]) -> () {
    for i in range(0, queue_in.count) @{
        let val = basic_shader(extract_ray(*queue_in, i), queue_out);
        
        framebuffer(i) = val(0);
        framebuffer(i+1) = val(1);
        framebuffer(i+2) = val(2);
        framebuffer(i+3) = val(3);
    }
}

fn generate_rays(queue_out : &RayQueue, width : i32, height : i32, shader_ref : ShaderRef) -> () {
    for x in range(0, width) {
        for y in range(0, height) {
            set_ray(queue_out, y * width + x, basic_ray_gen(x, y, width, height));
        }
    }
}
