struct Ray {
    org : Vec3,
    dir : Vec3,
    inv : Vec3,
    tri : i32,
    tmin : f32,
    tmax : f32,
    u : f32,
    v : f32
}

struct Rays {
    org_x: &[f32],
    org_y: &[f32],
    org_z: &[f32],

    dir_x: &[f32],
    dir_y: &[f32],
    dir_z: &[f32],

    tri: &[i32],
    tmin: &[f32],
    tmax: &[f32],
    u: &[f32],
    v: &[f32]
}

struct RayQueue {
    data:   &Rays,
    count:  i32
}

fn extract_ray(queue : RayQueue, id : i32) -> Ray {
    let ray = Ray {
        org: Vec3 { values : [(*queue.data).org_x(id), (*queue.data).org_y(id), (*queue.data).org_z(id)] },
        dir: Vec3 { values : [(*queue.data).dir_x(id), (*queue.data).dir_y(id), (*queue.data).dir_z(id)] },
        inv: Vec3 { values : [1.0f / (*queue.data).dir_x(id),
                              1.0f / (*queue.data).dir_y(id),
                              1.0f / (*queue.data).dir_z(id)] },
        tri: (*queue.data).tri(id),
        tmin: (*queue.data).tmin(id),
        tmax: (*queue.data).tmax(id),
        u: (*queue.data).u(id),
        v: (*queue.data).v(id)
    };
    
    (ray)
}

fn set_ray(mut queue : &RayQueue, id : i32, r : Ray) -> () {
    (*(*queue).data).org_x(id) = r.org.values(0);
    (*(*queue).data).org_y(id) = r.org.values(1);
    (*(*queue).data).org_z(id) = r.org.values(2);
    
    (*(*queue).data).dir_x(id) = r.dir.values(0);
    (*(*queue).data).dir_y(id) = r.dir.values(1);
    (*(*queue).data).dir_z(id) = r.dir.values(2);
    
    (*(*queue).data).tri(id) = r.tri;
    (*(*queue).data).tmin(id) = r.tmin;
    (*(*queue).data).tmax(id) = r.tmax;
    (*(*queue).data).u(id) = r.u;
    (*(*queue).data).v(id) = r.v;
}

