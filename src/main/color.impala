struct Color
{
    r : float,
    g : float,
    b : float
}

fn color(r : float, g : float, b : float) -> Color
{
    Color{ r:r, g:g, b:b }
}

fn color1(c : float) -> Color
{
    color(c, c, c)
}

fn color0() -> Color
{
    color1(0.0f)
}

fn cclamp01(c : Color) -> Color
{
    color(clamp01f(c.r), clamp01f(c.g), clamp01f(c.b))
}

fn clerp(c1 : Color, c2 : Color, t : float) -> Color
{
    color(lerp(c1.r, c2.r, t),
          lerp(c1.g, c2.g, t),
          lerp(c1.b, c2.b, t))
}


fn col_rgb2int(cc : Color) -> u32
{
    let c = cclamp01(cc);
     0xff000000u32
     | ((((c.b*255.0f) as int) as u32) << 16u32)
     | ((((c.g*255.0f) as int) as u32) << 8u32 )
     | ((((c.r*255.0f) as int) as u32)         )
}
