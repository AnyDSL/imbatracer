
/*
// TODO: would be nice if this worked...
type RenderParams = (&View, fn(View, float, float) -> Ray );
fn renderParams(v : &View, cam : fn(View, float, float) -> Ray ) -> RenderParams
{
    (v, cam)
}
*/

fn renderPixeli(cam : fn(View, float, float) -> Ray, v : View, x : int, y : int, w : int, h : int) -> Color
{
    @renderPixelf(cam, v, x as float, y as float, w as float, h as float)
}

fn renderPixelf(cam : fn(View, float, float) -> Ray, v : View, x : float, y : float, w : float, h : float) -> Color
{
    let nx = (x + 0.5f) / w;
    let ny = (y + 0.5f) / h;
    @renderCoords(cam, v, nx, ny)
}

fn renderCoords(cam : fn(View, float, float) -> Ray, v : View, x : float, y : float) -> Color
{
    // convert to screen coordinates (remember to swap y axis)
    let sx =  (x - 0.5f) * 2.0f;
    let sy = -(y - 0.5f) * 2.0f;

    @getRadiance(cam(v, sx, sy)) // TODO: support for other ray types
}

fn getRadiance(r : Ray) -> Color
{
    color(0.0f, 0.0f, 0.0f) // TODO
}
