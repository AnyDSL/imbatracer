
struct State
{
    time : float,
    cam : Cam,
    integrator : Integrator,
    scene : Scene,

}

extern fn impala_init(mut state : &State) -> ()
{
    (*state).time = 0.0f;
    (*state).integrator.itype = 0;

    let scene = &(*state).scene;
    //scene_add_cube(scene);
    scene_add_file(scene, 2);
    scene_build(scene);
}

fn impala_update(mut state : &State, dt : float) -> ()
{
    let time = (*state).time;
    (*state).time = time + dt;
    let scale = 10.0f;
    let pos = point(-3.5f*scale*sinf(time), 1.2f*scale*sinf(0.2f*time), 3.7f*scale*cosf(time));
    let at = point0();
    let up = vec(0.0f, 1.0f, 0.0f);
    let horzOpenAngle = M_PI() / 4.0f;
    let vertOpenAngle = M_PI() / 3.0f;
    (*state).cam = camPerspectiveLookAt(pos, at, up, horzOpenAngle, vertOpenAngle);
}

extern fn impala_render(buf : &[u32], width : int, height : int, mut state : &State, dt : float)
-> ()
{
    @impala_update(state, dt);
    let camera = @compileCamera(&(*state).cam);
    let scene = @compileScene(&(*state).scene);
    let integrator = @compileIntegrator(&(*state).integrator, scene);

    renderImage(buf, width, height, |x, y| {
        integrator(camera(x, y))
    } )
}
