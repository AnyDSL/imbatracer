
extern "C"
{
    fn callbackTest(x : int, y : int) -> ();
}

struct State
{
    time : float,
    cam : Cam,
    integrator : Integrator,
    scene : Scene
}


// TODO: passed state should be a struct
extern fn impala_render(mut buf : &[u32], width : int, height : int, state : &State)
-> ()
{
    /*let ti = (*state).time as int;
    for x, y in iteration(width, height)
    {
        let c = (0
            | 0xff000000 //(0x80 << 24) // alpha // FIXME: shift term still generates invalid code
            | (ti+(x^y^(rand()&0x40)) << 16) // blue
            | (y << 8) // green
            | x // red
            );

        buf(y*width+x) = c as u32;
    }*/

    let getray = getRayFn((*state).cam);
    let getrad = getRadFn((*state).integrator, (*state).scene); // FIXME pass ptr to scene here
    let rendercoord = |x:float, y:float|->Color {getrad(getray(x, y))};

    for x, y in iteration(width, height)
    {
        let c = @renderPixel(rendercoord, x, y, width, height);
        let idx = y*width+x;
        assert(||{idx >= 0 && idx < width*height});
        buf(idx) = col_rgb2int(c)
    }
}

