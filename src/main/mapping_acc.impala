fn renderIteration(width : int, height : int, measureTime : bool, state : &State, body : fn(int, int, &RTState, &RTScratch) -> () ) -> ()
{
    let unroll = 1;
    let dim = (width, height/unroll, 1);
    let block = (128, 1, 1);

    // extract the stuff we need
    let cam = (*state).cam;
    let integrator = (*state).integrator;
    let verts = (*state).scene.verts;
    let triVerts = (*state).scene.triVerts;
    let bvhNodes = (*state).scene.bvhNodes;
    let objs = (*state).scene.objs;
    let nObjs = (*state).scene.nObjs;

    // FIXME measure rendering time
    acc(@acc_dev(), dim, block, || -> () {
        let gid_x = acc_gidx();
        let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
        let mut scratch = emptyScratch(); // scratch space for the current intersection
        let mut rtstate = RTState { cam:cam, integrator:integrator, scene:Scene { verts:verts, triVerts:triVerts, bvhNodes:bvhNodes, objs:objs, nObjs:nObjs } };

        for i in @range(0, unroll) {
            @body(gid_x, gid_y + i * acc_bdimy(), &rtstate, &scratch);
        }
    });
}

fn assert(f : fn() -> bool, i : int) -> ()
{
}
