
struct Light
{
    ty : int,
    intensity : Color,
    pos : Point,
    dir : Vec,
    exp : float,
    falloff : float,
    cutAngle : float,
}

struct LightHit
{
	dir : Vec,    //the *normalized* direction where the light is coming FROM at the given point - this points from the hit to the light
	dist : float, //the distance that has to be checked, along the direction, for occlusion
}

fn pointLight(pos : Point, intensity : Color) -> Light
{
    Light{ty:0, pos:pos, intensity:intensity,
          dir:@vec0(), exp:0.0f, falloff:0.0f, cutAngle:0.0f
    }
}

fn evalLightHit(li: &Light, p:Point) -> LightHit
{
    let dir = @to(p, li.pos);
    let len = @vlen(dir);
    LightHit{dir:vfmul(dir, 1.0f/len), dist:len}
}

fn evalLightIntensity(li: &Light, irr: LightHit) -> Color
{
    @cmul(li.intensity, 1.0f / sqr(irr.dist))
}

