
fn triPoint(tri : uint, pt : uint, scene : &Scene) -> Point
{
    assert(||{pt < 3u && tri < (*scene).nTris}, 20);
    let idx = (*scene).triVerts(3u*tri + pt);
    (*scene).verts(idx)
}

fn triIntersectDistance(tri : uint, scene : &Scene, ray : Ray, maxDistance : float) -> (float, Vec, Point) // t, barycentric coords
{
    /* Directly compute barycentric coordinates and t, and cancel early if we notice the ray is not going to hit
     * Surface parameterization: with barycentric coordinates b1, b2, it is p(b1, b2) = (1-b1-b2)*a + b1*b + b2*c
     * Let e1 = a.to(b), a2 = a.to(c). Then p(b1, b2) * a + b1*e1 + b2*e2
     * We want p(b1, b2) = o + t*d, which after sorting coefficients yields
     *      -t*d + b1*e1 + b2*e2 = o-a = a.to(o)
     * This is a linear system with the matrix A = [ -d e1 e2 ] and s = a.to(o). By Cramer's rule, the solution is
     * Let detA = | A |, then t = | s  e1 e2 | / detA
     *					     b1 = | -d s  e2 | / detA
     *                       b2 = |-d  e1  s | / detA
     * We can use that | v1 v2 v3 | = v1*cross(v2, v3), and swapping columns *twice* does not change the determinant
     * so we can pre-compute cross(d, e2) = cross(e2, -d) = f1, cross(s, e1) = f2, and we get
     * detA = e1*f1, t = e2*f2, / detA, b1 = s*f1, b2 = -d*-f2 = d*f2
     */
    // compute inverse determinant
    let a = @triPoint(tri, 0u, scene);
    let e1 = to(a, @triPoint(tri, 1u, scene));
    let e2 = to(a, @triPoint(tri, 2u, scene));
    let f1 = cross(ray.d, e2);
    let detA = dot(e1, f1);
    let invDetA = 1.0f / detA;

    // compute b1
    let s = to(a, ray.o);
    let b1 = dot(s, f1) * invDetA;
    if b1 < 0.0f || b1 > 1.0f
    { (-1.0f, vec0(), point0()) }
    else
    {
        // compute b2
        let f2 = cross(s, e1);
        let b2 = dot(ray.d, f2) * invDetA;
        if b2 < 0.0f || b1+b2 > 1.0f
        { (-1.0f, vec0(), point0()) }
        else
        {
            // compute t
            let t = dot(e2, f2) * invDetA;
            if t >= maxDistance
            { (-1.0f, vec0(), point0()) }
            else
            { (t, normalize(cross(e1, e2)), point(1.0f-b1-b2, b1, b2)) }
        }
    }
}

fn triIntersectAny(tri : uint, scene : &Scene, ray : Ray, maxDistance : float) -> bool
{
    triIntersectDistance(tri, scene, ray, maxDistance)(0) >= 0.0f // TODO can we use partial evaluation to compute only the necessary component
}

fn triIntersectFirst(tri : uint, scene : &Scene, isec : &Intersection) -> ()
{
    let res = @triIntersectDistance(tri, scene, (*isec).ray, (*isec).dist);
    let t = res(0); // TODO: would be nice to have syntax for tuple unpacking
    if t >= 0.0f
    {
        let normal = res(1);
        improveIntersection(isec, t, tri, normal, defaultEps());
    }
}

