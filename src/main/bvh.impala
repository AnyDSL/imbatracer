
struct BVHNode
{
    bbox : BBox,
    sndChildFirstPrim : uint, // for an inner node, the second child. for a leaf, the first primitive.
    nPrim : u16, // number of primitives in child. 0 for inner node.
    axis: u16,
}

struct BVHTraversal
{
    todo : [uint*16], // sync this with BVH construction in C++!
}
fn emptyBVHTraversal() -> BVHTraversal
{
    @BVHTraversal { todo:[0u,0u,0u,0u, 0u,0u,0u,0u, 0u,0u,0u,0u, 0u,0u,0u,0u] }
}

fn bvhBBoxComp(bounds : BBox, comp : bool) -> Point
{
    if comp { bounds.cmax } else { bounds.cmin }
}

fn bvhDirIsNeg(neg : uint, axis : uint) -> bool
{
    (neg & (1u << axis)) != 0u
}

fn bvhMakeNeg(invDir : Vec) -> uint
{
    (bool2uint(invDir.x < 0.0f)      ) |
    (bool2uint(invDir.y < 0.0f) << 1u) |
    (bool2uint(invDir.z < 0.0f) << 2u)
}

fn bvhIntersectNode(bounds : BBox, ray : Ray, maxDist : float, invDir : Vec, neg: uint) -> bool
{
    // Check for ray intersection against x and y slabs
    let txmin = (@bvhBBoxComp(bounds,  @bvhDirIsNeg(neg, 0u)).x - ray.o.x) * invDir.x;
    let txmax = (@bvhBBoxComp(bounds, !@bvhDirIsNeg(neg, 0u)).x - ray.o.x) * invDir.x;
    let tymin = (@bvhBBoxComp(bounds,  @bvhDirIsNeg(neg, 1u)).y - ray.o.y) * invDir.y;
    let tymax = (@bvhBBoxComp(bounds, !@bvhDirIsNeg(neg, 1u)).y - ray.o.y) * invDir.y;
    if (txmin > tymax) || (tymin > txmax)
    { false }
    else {
        let tmin = max(txmin, tymin);
        let tmax = min(txmax, tymax);
        // Check for ray intersection against z slab
        let tzmin = (@bvhBBoxComp(bounds,  @bvhDirIsNeg(neg, 2u)).z - ray.o.z) * invDir.z;
        let tzmax = (@bvhBBoxComp(bounds, !@bvhDirIsNeg(neg, 2u)).z - ray.o.z) * invDir.z;
        if  (tmin > tzmax) || (tzmin > tmax)
        { false }
        else
        {
            max(tmin, tzmin) < maxDist && min(tmax, tzmax) >= 0.0f
        }
    }
}

fn bvhIntersectFirst(root: uint, scene : &Scene, mut scratch : &RTScratch) -> ()
{
    let isec = &(*scratch).isec;
    let mut todo = &(*scratch).bvh.todo;
    let invDir = @vapply1((*isec).ray.d, |f|1.0f/f);
    let neg = @bvhMakeNeg(invDir);
    let mut todoIdx = 0; // the first *free* index
    let mut curNode = root;
    for ever() // we shouldn't unroll this, but adding a $ here makes stuff go slower
    {
        let node = (*scene).bvhNodes(curNode);
        if @bvhIntersectNode(node.bbox, (*isec).ray, (*isec).dist, invDir, neg)
        {
            if (node.nPrim > 0u16) {
                // a leaf
                for tri in urange(node.sndChildFirstPrim, node.sndChildFirstPrim+(node.nPrim as uint)) {
                    triIntersectFirst(tri, scene, isec);
                }
                // done with this node, pop one off the stack
                if todoIdx == 0 {
                    break() // DONE!
                }
                else {
                    todoIdx = todoIdx-1;
                    curNode = (*todo)(todoIdx);
                }
            }
            else {
                // an inner node, which child do we get to first?
                if @bvhDirIsNeg(neg, node.axis as uint) {
                    (*todo)(todoIdx) = curNode+1u; // do the left child later
                    todoIdx = todoIdx+1;
                    curNode = node.sndChildFirstPrim; // do the right child now
                }
                else {
                    (*todo)(todoIdx) = node.sndChildFirstPrim; // do the right child later
                    todoIdx = todoIdx+1;
                    curNode = curNode+1u; // do the left child now
                }
            }
        }
        else
        {
            // we missed this node, pop one off the stack
            if todoIdx == 0 {
                break() // DONE!
            }
            else {
                todoIdx = todoIdx-1;
                curNode = (*todo)(todoIdx);
            }
        }
    }
}
