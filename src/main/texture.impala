
fn constantTexture(c : Color) -> fn(Point) -> Color
{
    |p:Point| { c }
}

fn checkerboardTexture(a : Color, b : Color) -> fn(Point) -> Color
{
    //let cols = [a, b];
    |p:Point|
    {
        let i = bool2uint(absfractional(p.x) >= 0.5f)
              ^ bool2uint(absfractional(p.y) >= 0.5f)
              ^ bool2uint(absfractional(p.z) >= 0.5f);
        //cols(i); // FIXME: what is faster?
        if i == 0u { a } else { b }
    }
}

fn noiseTexture(a : Color, b : Color, noise : fn(Point) -> float) -> fn(Point) -> Color
{
    //let cols = [a, b];
    |p:Point|
    {
        let t = @noise(p);
        @clerp(a, b, t)
    }
}
