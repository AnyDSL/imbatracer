struct Material
{
    // diffuse
    diffuse : Color,
    // specular (phong)
    specular : Color,
    specExp : float,
    // ambient / emissive
    emissive : Color,
}

fn dummyMaterial() -> Material
{
    Material {
        diffuse:color0(),
        specular:color0(),
        specExp:0.0f,
        emissive:color0()
    }
}


fn buildDummyMaterial(mat : Material) -> (fn(Point, Vec, Vec, Vec) -> Color, fn(Point, Vec, Vec) -> Color)
{
    let reflectance = |texPoint:Point, normal:Vec, outDir:Vec, inDir:Vec| -> Color
    {
        let v = @absdot(inDir, normal);
        @color1(v)
    };

    let emission = |texPoint:Point, normal:Vec, outDir:Vec| -> Color
    {
        //@color0()
        @color(0.0f, 0.2f, 0.0f)
    };

    (reflectance, emission)
}
/*
fn buildLambertianMaterial(mat : Material) -> (fn(Point, Vec, Vec, Vec) -> Color, fn(Point, Vec, Vec) -> Color)
{
    let diffuse = mat.tex1;
    let reflectance = |texPoint:Point, normal:Vec, outDir:Vec, inDir:Vec| -> Color
    {
        let v = @absdot(inDir, normal) / @pi();
        let c = @diffuse(texPoint);
        @cmul(c, v)
    };

    let emission = |texPoint:Point, normal:Vec, outDir:Vec| -> Color
    {
        @diffuse(texPoint)
    };

    (reflectance, emission)
}
*/

fn buildMaterial(mat : Material) -> (fn(Point, Vec, Vec, Vec) -> Color, fn(Point, Vec, Vec) -> Color)
{
    //if(mat.ty == 0) {buildLambertianMaterial(mat) }
    //else { buildDummyMaterial(mat) }

    buildDummyMaterial(mat)
}
