

struct Scene
{
    verts : &[Point],
    triVerts : &[uint], // 3 successive entries are the three indices of the vertices of a triangle
    bvhNodes: &[BVHNode],

    objs: &[Object],
    nObjs : uint,
}


fn noIdx() -> uint // the ID to be used when "nothing" is referenced (not valid for vertices; either one normal/texCoord or all of them must be absent)
{ 0xFFFFFFFFu }

// TODO: Figure out the best way to pass around stuff. Scene as pointer or as copy? Intersection as pointer, or as function from Ray to isect?
fn sceneIntersectFirst(scene: Scene, scratch : &RTScratch) -> ()
{
    for obj in urange(0u, scene.nObjs)
    {
        @objIntersectFirst(obj, scene, scratch)
    }
}
