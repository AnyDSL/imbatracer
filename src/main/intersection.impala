
fn defaultEps() -> float
{
    2.0f*0.00001f // FIXME: value + this should be static variable (as soon as compiler supports it)
}

fn noObj() -> uint
{ 0xFFFFFFFFu }

struct Intersection
{
    dist : float,
    obj : uint,
    ray : Ray,
    norm : Vec,
//    uv : Point,
    eps : float
}

fn noIntersection() -> Intersection
{
    // TODO: there is no need to init anything but obj
    Intersection{ obj:noObj(),
        dist:-1.0f, ray:ray0(), norm:vec0(), eps:0.0f
    }
}

fn beginIntersection(ray : Ray) -> Intersection
{
    // TODO: only dist & obj needed
    Intersection{ dist:FLT_MAX_fn(), obj:noObj(),
        ray:ray, norm:vec0(), eps:0.0f }
}


fn improveIntersection(mut isec : &Intersection, dist : float, obj : uint, norm : Vec, eps : float) -> ()
{
    // TODO: various assertions

    (*isec).dist = dist;
    (*isec).obj = obj;
    (*isec).norm = norm;
    (*isec).eps = eps;
}



