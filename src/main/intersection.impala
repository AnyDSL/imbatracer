
fn defaultEps() -> float
{
    2.0f*0.00001f // FIXME: value + this should be static variable (as soon as compiler supports it)
}

fn noObj() -> uint
{ 0xFFFFFFFFu }

struct Intersection
{
    dist : float,
    obj : uint,
    ray : Ray,
    norm : Vec,
    uv : Point,
    eps : float
}

fn beginIntersection(ray : Ray) -> Intersection
{
    // TODO: only dist obj & ray needed
    Intersection{ dist:FLT_MAX_fn(), obj:noObj(), ray:ray,
            norm:vec0(), uv:point0(), eps:0.0f }
}


fn improveIntersection(mut isec : &Intersection, dist : float, obj : uint, norm : Vec, uv : Point, eps : float) -> ()
{
    @assert(||dist < (*isec).dist && obj != noObj(), 23);
    (*isec).dist = dist;
    (*isec).obj = obj;
    (*isec).norm = norm;
    (*isec).uv = uv;
    (*isec).eps = eps;
}



