struct View
{
    origin : Point,
    forward : Vec,
    up : Vec,
    right : Vec,
    originalUp : Vec,
    rightFactor : float,
    upFactor : float
}

fn view(origin : Point, forward : Vec, up : Vec) -> View
{
    viewEx(origin, forward, up, 1.0f, 1.0f)
}

fn viewEx(origin : Point, forward : Vec, up : Vec, upFactor : float, rightFactor : float) -> View
{
    let mut v = View{ origin : origin, forward : forward, up : up, upFactor : upFactor, rightFactor : rightFactor,
        right : vec0(), originalUp : up
    };
    @viewSetForwardUp(&v, forward, up);
    v
}

fn view1(pos : Point) -> View
{
    view(pos, vec(0.0f, 0.0f, 1.0f), vec(0.0f, 1.0f, 0.0f))
}

fn view0() -> View
{
    view1(point0())
}

fn viewSetForwardUp(mut v : &View, f : Vec, u : Vec) -> ()
{
    (*v).originalUp = u;
    let fnorm = normalize(f);
    (*v).forward = fnorm;

    print_iv(20000, u);
    print_iv(20001, fnorm);
    let t = orthogonalize(fnorm, u); // (ortho, third)
    (*v).up = vfmul(t(0), (*v).upFactor);
    print_iv(20002, (*v).up);
    (*v).right = vfmul(t(1), (*v).rightFactor);
    print_iv(20003, (*v).right);
}


fn viewSetForward(v : &View, f : Vec) -> ()
{
    viewSetForwardUp(v, f, (*v).originalUp)
}

fn viewSetLookAt(v : &View, at : Point) -> ()
{
    viewSetForward(v, to((*v).origin, at))
}

fn viewSetUp(v : &View, up : Vec) -> ()
{
    viewSetForwardUp(v, (*v).forward, up)
}

fn viewSetScale(mut v : &View, upFactor : float, rightFactor : float) -> ()
{
    (*v).rightFactor = rightFactor;
    (*v).upFactor = upFactor;
    viewSetForwardUp(v, (*v).forward, (*v).originalUp);
}

fn viewSetOpeningAngle(v : &View, vertical : float, horiz : float) -> ()
{
    viewSetScale(v, tanf(vertical / 2.0f), tanf(horiz / 2.0f));
}

fn viewSetOpeningAngleWithAspectRatio(v : &View, vertical : float, aspect : float) -> ()
{
    let a = tanf(vertical / 2.0f);
    viewSetScale(v, a, a*aspect);
}


