/* render.h : Impala interface file generated by impala */
#ifndef RENDER_H
#define RENDER_H

#ifdef __cplusplus
extern "C" {
#endif

struct Model {
    int* tex_ref;
    int tex_count;
    int vertex_buf;
    int index_buf;
    int* buf_refs;
    int buf_count;
    int shader;
};

struct Texture {
    float* pixels;
    int width;
    int height;
};

struct Buffer {
    int format;
    unsigned char* data;
    int size;
};

struct HemiLight {
    float intensity[3];
    int shader;
    float pos[3];
    float dir[3];
    float cutoff;
};

struct AreaLight {
    float intensity[3];
    int shader;
    int vertex_buf;
    int index_buf;
    float area;
};

struct Scene {
    struct Model* models;
    int model_count;
    struct Texture* textures;
    int tex_count;
    struct Buffer* buffers;
    int buf_count;
    struct HemiLight* hemi_lights;
    struct AreaLight* area_lights;
    int hemi_light_count;
    int area_light_count;
};

struct BvhNode {
    float min[3];
    int child_tri;
    float max[3];
    int prim_count;
};

struct Accel {
    struct BvhNode* nodes;
    int* indices;
    float* vertices;
    int root;
};

struct Rays {
    float* org_x;
    float* org_y;
    float* org_z;
    float* dir_x;
    float* dir_y;
    float* dir_z;
    int* tri;
    float* tmin;
    float* tmax;
    float* u;
    float* v;
};

struct RayQueue {
    struct Rays data;
    int count;
};

void render_scene(struct Scene* scene, struct Accel* accel_ptr, struct Texture* output_tex, int pixel_sample_count, struct RayQueue* ray_queue_in, struct RayQueue* ray_queue_out);

#ifdef __cplusplus
}
#endif

#endif /* RENDER_H */

