// TODO : introduce a polymorphic image type
struct TexturePixel {
    r: u8,
    g: u8,
    b: u8,
    a: u8
}

fn texture_pixel(r: u8, g: u8, b: u8, a: u8) -> TexturePixel {
    TexturePixel {
        r : r,
        g : g,
        b : b,
        a : a
    }
}

struct Texture {
    width: int,
    height: int,
    stride: int,
    pixels: &[TexturePixel]
}

struct GBufferPixel {
    t: float,
    u: float,
    v: float,
    mat_id: int
}

fn gbuffer_pixel(t: float, u: float, v: float, mat_id: int) -> GBufferPixel {
    GBufferPixel {
        t : t,
        u : u,
        v : v,
        mat_id : mat_id
    }
}

struct GBuffer {
    width: int,
    height: int,
    stride: int,
    buffer: &[GBufferPixel]
}

