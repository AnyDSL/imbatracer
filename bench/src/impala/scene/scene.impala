struct Scene {
    instances:     &[MeshInstance],
    num_instances: int,
    meshes:        &[Mesh],
    num_meshes:    int,
    textures:      &[Texture],
    num_textures:  int
}

// TODO : introduce a polymorphic compiled scene type (this is currently designed only for BVHs)
// this also implies that we modify the impala cgen so that you can generate void* pointers
// for pointers to structures that you want to hide.
struct CompiledScene {
    mesh_bvhs: ~[Bvh],
    scene_bvh: Bvh,
}

extern fn compile_scene(mut scene: &Scene, mut cscene: &CompiledScene) -> () @{
    /*// Build a BVH for each mesh
    let mut mesh_bvhs = ~[scene.num_meshes: Bvh];    
    for i in range(0, scene.num_meshes) @{
        mesh_bvhs(i) = build_mesh_bvh(&scene.meshes(i));
    }

    // Build an outer BVH that encloses the scene
    let outer_bvh = build_bvh(|i| mesh_bvhs(i).nodes(0).bounds,
                              |i| box_center(mesh_bvhs(i).nodes(0).bounds),
                              scene.num_meshes);

    cscene.mesh_bvhs = mesh_bvhs;
    cscene.scene_bvh = outer_bvh;*/
}
/*
extern fn update_scene(scene: &Scene, mut cscene: &CompiledScene) -> () {
    // TODO : Check that the number of textures & meshes has not changed

    // Refit the BVH of each mesh (could be done in parallel)
    for i in range(0, scene.num_meshes) @{
        refit_bvh(&cscene.mesh_bvhs(i), |j| @{
            let v0 = scene.meshes(i).vertices(scene.meshes(i).indices(j * 3 + 0));
            let v1 = scene.meshes(i).vertices(scene.meshes(i).indices(j * 3 + 1));
            let v2 = scene.meshes(i).vertices(scene.meshes(i).indices(j * 3 + 2));

            box(vec3_min(v0, vec3_min(v1, v2)),
                vec3_max(v0, vec3_max(v1, v2)))
        });
    }

    // TODO: remove this when impala supports auto pointers
    thorin_free(cscene.scene_bvh.nodes as &[u8]);
    thorin_free(cscene.scene_bvh.prim_ids as &[u8]);

    // Rebuild the outer BVH
    cscene.scene_bvh = build_bvh(|i| cscene.mesh_bvhs(i).nodes(0).bounds,
                                 |i| box_center(cscene.mesh_bvhs(i).nodes(0).bounds),
                                 scene.num_meshes);
}*/

