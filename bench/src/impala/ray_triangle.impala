struct Ray {
    dir: Vec3,
    org: Vec3
}

struct Tri {
    v0: Vec3,
    v1: Vec3,
    v2: Vec3
}

fn intersect_ray_tri(ray: Ray,
                     tri: Tri,
                     intr: fn (float, float, float) -> (),
                     nointr: fn () -> ()) -> () {
    let e0 = @v3sub(tri.v1, tri.v0);
    let e1 = @v3sub(tri.v2, tri.v0);

    let pvec = @v3cross(ray.dir, e1);
    let det = @v3dot(e0, pvec);

    let epsilon = 0.0001f;

    if det > -epsilon && det < epsilon {
        @nointr();
        return()
    }

    let inv_det = 1.0f / det;

    let tvec = @v3sub(ray.org, tri.v0);
    let u = @v3dot(tvec, pvec) * inv_det;

    if u < 0.0f || u > 1.0f {
        @nointr();
        return()
    }

    let qvec = @v3cross(tvec, e0);
    let v = @v3dot(ray.dir, qvec) * inv_det;

    if v < 0.0f || u + v > 1.0f {
        @nointr();
        return()
    }

    let t = @v3dot(e1, qvec) * inv_det;

    @intr(t, u, v)
}

